generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["auth", "billing", "config", "core"]
}

model accounts {
  id                  String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id             String? @db.Uuid
  provider            String
  provider_account_id String
  access_token        String?
  refresh_token       String?
  expires_at          BigInt?
  users               users?  @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("auth")
}

model sessions {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id       String?  @db.Uuid
  session_token String   @unique
  expires       DateTime @db.Timestamp(6)
  users         users?   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("auth")
}

model subscriptions {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenant_id  String?   @db.Uuid
  plan       String
  status     String
  started_at DateTime? @db.Timestamp(6)
  ends_at    DateTime? @db.Timestamp(6)
  tenants    tenants?  @relation(fields: [tenant_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("billing")
}

model usage {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenant_id       String?   @db.Uuid
  tokens_used     Int?      @default(0)
  storage_used_mb Int?      @default(0)
  recorded_at     DateTime? @default(now()) @db.Timestamp(6)
  tenants         tenants?  @relation(fields: [tenant_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("billing")
}

model integrations {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  type      String?
  tenant_id String?  @db.Uuid
  config    Json?
  tenants   tenants? @relation(fields: [tenant_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("config")
}

model modules {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  description String?
  enabled     Boolean? @default(true)
  tenant_id   String?  @db.Uuid
  tenants     tenants? @relation(fields: [tenant_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("config")
}

model tenants {
  id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String
  slug          String          @unique
  created_at    DateTime?       @default(now()) @db.Timestamp(6)
  subscriptions subscriptions[]
  usage         usage[]
  integrations  integrations[]
  modules       modules[]
  users         users[]

  @@schema("core")
}

model users {
  id         String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenant_id  String?    @db.Uuid
  email      String     @unique
  full_name  String?
  role       String?    @default("user")
  created_at DateTime?  @default(now()) @db.Timestamp(6)
  accounts   accounts[]
  sessions   sessions[]
  tenants    tenants?   @relation(fields: [tenant_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("core")
}
